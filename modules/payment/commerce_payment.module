<?php

/**
 * @file
 * Provides payment functionality.
 */

use Drupal\commerce_payment\Entity\Payment;
use Drupal\commerce_payment\Exception\HardDeclineException;
use Drupal\commerce_payment\Exception\PaymentGatewayException;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 */
function commerce_payment_commerce_checkout_pane_info_alter(&$definitions) {
  // The payment_information pane replaces the billing_information one.
  unset($definitions['billing_information']);
}

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_payment_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'commerce_order') {
    $fields['payment_gateway'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Payment gateway'))
      ->setDescription(t('The payment gateway.'))
      ->setRequired(TRUE)
      ->setSetting('target_type', 'commerce_payment_gateway');

    $fields['payment_method'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Payment method'))
      ->setDescription(t('The payment method.'))
      ->setRequired(TRUE)
      ->setSetting('target_type', 'commerce_payment_method');

    return $fields;
  }
}

/**
 * Implements hook_theme().
 */
function commerce_payment_theme() {
  return [
    'commerce_payment_method' => [
      'render element' => 'elements',
    ],
    'commerce_payment_method__credit_card' => [
      'base hook' => 'commerce_payment_method',
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_commerce_payment_method().
 */
function commerce_payment_theme_suggestions_commerce_payment_method(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_payment_method', $variables);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function commerce_payment_commerce_payment_method_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'credit_card') {
    $build['#attached']['library'][] = 'commerce_payment/payment_method_icons';
  }
}

/**
 * Prepares variables for payment method templates.
 *
 * Default template: commerce-payment-method.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_payment_method(array &$variables) {
  /** @var Drupal\commerce_payment\Entity\PaymentMethodInterface $payment_method */
  $payment_method = $variables['elements']['#commerce_payment_method'];

  $variables['payment_method_entity'] = $payment_method;
  $variables['payment_method_url'] = $payment_method->toUrl();
  $variables['payment_method'] = [
    // The label is generated dynamically, so it's not present in 'elements'.
    'label' => [
      '#markup' => $payment_method->label(),
    ],
  ];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['payment_method'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_payment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->get('commerce_checkout_form')) {
    $form['#validate'][] = 'commerce_payment_process_checkout_payment';
  }
}

/**
 * Processes payments after checkout.
 *
 * @param $form
 *   Checkout form.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 */
function commerce_payment_process_checkout_payment(&$form, FormStateInterface $form_state) {
  if ($form_state->get('next_step_id') == 'complete') {
    $order = $form_state->get('order');
    $payment_method = $order->payment_method->entity;
    $payment_gateway = $payment_method->getPaymentGateway();
    $payment_gateway_plugin = $payment_gateway->getPlugin();
    // @todo Restict payment creation by gateway type / configuration?
    // if (get_class($payment_gateway_plugin) instanceof OnsitePaymentGatewayInterface == FALSE) {
    //  return;
    // }
    /** @var \Drupal\commerce_price\Price $amount */
    // @todo Get orderBalance()?
    // @see https://github.com/drupalcommerce/commerce/pull/508
    $amount = $order->getTotalPrice();
    try {
      $payment = Payment::create([
        'state' => 'new',
        'amount' => $amount,
        'payment_gateway' => $payment_gateway->id(),
        'payment_method' => $payment_method,
        'order_id' => $order->getOrderNumber(),
      ]);
      // @todo Determine capture somehow?
      // transaction_type currently does not exist in the payment gateway config.
      // transaction_type comes from the payment capture form submit handler.
      // @see https://github.com/drupalcommerce/commerce/pull/542
      $capture = TRUE;
      $payment_gateway_plugin->createPayment($payment, $capture);
    }
    catch (HardDeclineException $e) {
      drupal_set_message($e->getMessage(), 'error');
      $form_state->setErrorByName('payment_method', 'Payment declined, please try another form of payment');
    }
    catch (PaymentGatewayException $e) {
      drupal_set_message('Problem communicating with payment gateway, please try again later', 'error');
      $form_state->setErrorByName('payment_method');
    }
    catch (\Exception $e) {
      drupal_set_message($e->getMessage(), 'error');
      $form_state->setErrorByName('payment_method');
    }
  }

}
