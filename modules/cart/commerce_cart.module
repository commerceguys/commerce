<?php

/**
 * @file
 * Implements the shopping cart system and add to cart features.
 */
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Entity\Entity\EntityViewMode;

/**
 * Implements hook_rebuild().
 * Creates a cart view mode for each line item source entity type
 */
function commerce_cart_rebuild() {
  $entityTypes = \Drupal::service('entity.manager')->getDefinitions();
  $entityTypes = array_filter($entityTypes, function ($entityType) {
    return $entityType->isSubclassOf('\Drupal\commerce\LineItemSourceInterface');
  });

  foreach ($entityTypes as $entityType) {
    /** @var \Drupal\commerce\LineItemSourceInterface $entityType */
    $exists = EntityViewMode::load($entityType->id() . '.cart');

    if (!$exists) {
      EntityViewMode::create([
        'id' => $entityType->id() . '.cart',
        'targetEntityType' => $entityType->id(),
        'label' => 'Cart',
        'status' => TRUE,
        'enabled' => TRUE,
      ])->save();
    }
    // Get all bundles for this entity type.
    $bundles = array_keys(\Drupal::service('entity.manager')->getBundleInfo($entityType->id()));
    foreach ($bundles as $bundle) {
      $entityViewDisplayId = $entityType->id() . '.' . $bundle . '.cart';
      // If there is no 'cart' view display for this entity type and bundle, create it.
      if (!EntityViewDisplay::load($entityViewDisplayId)) {
        $display = EntityViewDisplay::create([
          'id' => $entityViewDisplayId,
          'targetEntityType' => $entityType->id(),
          'bundle' => $bundle,
          'mode' => 'cart',
          'status' => TRUE,
        ]);
        $display->save();
      }
    }
  }
}