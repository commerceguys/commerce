<?php

/**
 * @file
 * Defines the Product entity and associated features.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\commerce_product\Entity\ProductInterface;

/**
 * Implements hook_theme().
 */
function commerce_product_theme() {
  return [
    'product_form' => [
      'render element' => 'form',
    ],
    'commerce_product' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Adds the default stores field to a product.
 *
 * A product can belong to multiple stores.
 * Store id can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each order type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 */
function commerce_product_add_stores_field($product_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'stores');
  $field = FieldConfig::loadByName('commerce_product', $product_type->id(), 'stores');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'stores',
      'entity_type' => 'commerce_product',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_store',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $product_type->id(),
      'label' => 'Stores',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('commerce_product', $product_type->id(), 'default')
      ->setComponent('stores', [
        'type' => 'commerce_entity_select',
        'weight' => -10,
      ])
      ->save();
  }
}

/**
 * Adds the default body field to a product type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 * @param string $label
 *   (optional) The label for the body instance. Defaults to 'Body'.
 */
function commerce_product_add_body_field($product_type, $label = 'Body') {
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'body');
  $field = FieldConfig::loadByName('commerce_product', $product_type->id(), 'body');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'body',
      'entity_type' => 'commerce_product',
      'type' => 'text_with_summary',
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $product_type->id(),
      'label' => $label,
      'settings' => ['display_summary' => FALSE],
    ]);
    $field->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('commerce_product', $product_type->id(), 'default')
      ->setComponent('body', [
        'type' => 'text_textarea_with_summary',
        'weight' => 1,
      ])
      ->save();
    // Assign display settings for 'default' view mode.
    entity_get_display('commerce_product', $product_type->id(), 'default')
      ->setComponent('body', [
        'label' => 'hidden',
        'type' => 'text_default',
      ])
      ->save();
  }
}

/**
 * Adds the default variations field to a product type.
 *
 * Variations can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each product type.
 *
 * @param \Drupal\commerce_product\Entity\ProductTypeInterface $product_type
 *   The product type.
 */
function commerce_product_add_variations_field($product_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_product', 'variations');
  $field = FieldConfig::loadByName('commerce_product', $product_type->id(), 'variations');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'variations',
      'entity_type' => 'commerce_product',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_product_variation',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $product_type->id(),
      'label' => 'Variations',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [
          'target_bundles' => [
            $product_type->getVariationType(),
          ],
        ],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    // Assign widget settings for the 'default' form mode.
    entity_get_form_display('commerce_product', $product_type->id(), 'default')
      ->setComponent('variations', [
        'type' => 'inline_entity_form_complex',
        'weight' => 10,
        'settings' => [
          'override_labels' => TRUE,
          'label_singular' => 'variation',
          'label_plural' => 'variations',
        ],
      ])
      ->save();
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_product_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $widget_name = $context['widget']->getPluginId();
  if ($field_name == 'path' && $entity_type == 'commerce_product' && $widget_name == 'path') {
    $element['alias']['#description'] = t('The alternative URL for this product. Use a relative path. For example, "/my-product".');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'field_ui_field_edit_form'.
 */
function commerce_product_form_field_config_edit_form_alter(array &$form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();
  if ($field->getTargetEntityTypeId() != 'commerce_product_variation') {
    return;
  }

  if ($field->getType() == 'entity_reference' && $field->getFieldStorageDefinition()->getCardinality() == 1) {
    $attribute_field = $field->getThirdPartySetting('commerce_product', 'attribute_field', FALSE);
    $attribute_widget = $field->getThirdPartySetting('commerce_product', 'attribute_widget', 'select');
    $attribute_widget_title = $field->getThirdPartySetting('commerce_product', 'attribute_widget_title', NULL);

    $form['field']['commerce_product'] = [
      '#type' => 'fieldset',
      '#title' => t('Product variation attribute settings'),
      '#weight' => 5,
      '#collapsible' => FALSE,
    ];
    $form['field']['commerce_product']['attribute_field'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable this field to function as an attribute field on Add to Cart forms.'),
      '#default_value' => $attribute_field,
    ];
    $form['field']['commerce_product']['attribute_widget'] = [
      '#type' => 'radios',
      '#title' => t('Attribute selection widget'),
      '#description' => t('The type of element used to select an option if used on an Add to Cart form.'),
      '#options' => [
        'select' => t('Select list'),
        'radios' => t('Radio buttons'),
      ],
      '#states' => [
        'visible' => [
          ':input[name="attribute_field"]' => ['checked' => TRUE],
        ],
      ],
      '#default_value' => $attribute_widget,
    ];
    // Determine the default attribute widget title.
    $form['field']['commerce_product']['attribute_widget_title'] = [
      '#type' => 'textfield',
      '#title' => t('Attribute widget title'),
      '#description' => t('Specify the title to use for the attribute widget on the Add to Cart form.'),
      '#states' => [
        'visible' => [
          ':input[name="attribute_field"]' => ['checked' => TRUE],
        ],
      ],
      '#default_value' => $attribute_widget_title,
    ];
    $form['actions']['submit']['#submit'][] = 'commerce_product_form_field_config_edit_form_submit';
  }
}

/**
 * Form submission handler for commerce_product_form_field_ui_field_edit_form_alter
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function commerce_product_form_field_config_edit_form_submit($form, FormStateInterface $form_state) {
  $field = $form_state->getFormObject()->getEntity();
  $settings = &$form_state->getValues('field');
  // If the attribute field is checked, update the attribute fields.
  if ($settings['attribute_field']) {
    $field->setThirdPartySetting('commerce_product', 'attribute_widget_title', $settings['attribute_widget_title']);
    $field->setThirdPartySetting('commerce_product', 'attribute_widget', $settings['attribute_widget']);
    $field->setThirdPartySetting('commerce_product', 'attribute_field', TRUE);
    $field->save();
  }
  else {
    $field->unsetThirdPartySetting('commerce_product', 'attribute_widget_title');
    $field->unsetThirdPartySetting('commerce_product', 'attribute_widget');
    $field->unsetThirdPartySetting('commerce_product', 'attribute_field');
    $field->save();
  }
}

/**
 * Prepares variables for Product templates.
 *
 * Default template: commerce-product.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_product(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  // Provide a distinct $teaser boolean.
  $variables['teaser'] = $variables['view_mode'] == 'teaser';
  $variables['product'] = $variables['elements']['#commerce_product'];
  /** @var Drupal\commerce_product\Entity\ProductInterface $product */
  $product = $variables['product'];
  $variables['date'] = drupal_render($variables['elements']['created']);
  unset($variables['elements']['created']);
  $variables['author_name'] = drupal_render($variables['elements']['uid']);
  unset($variables['elements']['uid']);

  $variables['url'] = $product->url('canonical', [
    'language' => $product->language(),
  ]);
  $variables['label'] = $variables['elements']['title'];
  unset($variables['elements']['title']);
  // The 'page' variable is set to TRUE:
  //   - The view mode is 'full' and we are on the 'product.view' route.
  $variables['page'] = ($variables['view_mode'] == 'full' && (commerce_product_product_is_page($product)));

  // Helpful $content variable for templates.
  $variables += array('content' => array());
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Display post information only on certain product types.
  /** @var Drupal\commerce_product\Entity\ProductTypeInterface $product_type */
  $product_type = $product->type->referencedEntities();
  $product_type = reset($product_type);

  // Used by RDF to add attributes around the author and date submitted.
  $variables['author_attributes'] = new Attribute();
  $variables['display_submitted'] = $product_type->displaySubmitted();
  if ($variables['display_submitted']) {
    if (theme_get_setting('features.commerce_product_user_picture')) {
      // To change user picture settings (e.g. image style), edit the 'compact'
      // view mode on the User entity. Note that the 'compact' view mode might
      // not be configured, so remember to always check the theme setting first.
      $variables['author_picture'] = user_view($product->getOwner(), 'compact');
    }
  }

  // Add article ARIA role.
  $variables['attributes']['role'] = 'article';
}

/**
 * Checks whether the current page is the full page view of the passed-in
 * product.
 *
 * @param \Drupal\commerce_product\Entity\ProductInterface $product
 *   A product entity.
 *
 * @return int|false
 *   The ID of the product if this is a full page view, otherwise FALSE.
 */
function commerce_product_product_is_page(ProductInterface $product) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'entity.commerce_product.canonical') {
    $page_product = $route_match->getParameter('commerce_product');
  }
  return (!empty($page_product) ? $page_product->id() == $product->id() : FALSE);
}

/**
 * Implements hook_theme_suggestions_commerce_product().
 */
function commerce_product_theme_suggestions_commerce_product(array $variables) {
  // Use commerce core helper callback to get the templates suggestions.
  $suggestions = _commerce_theme_suggestions_commerce_entity('commerce_product', $variables);

  return $suggestions;
}
