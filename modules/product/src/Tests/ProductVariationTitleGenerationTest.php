<?php

namespace Drupal\commerce_product\Tests;

use Drupal\commerce\Tests\CommerceTestBase;
use Drupal\commerce_product\Entity\ProductVariationType;
use Drupal\commerce_store\Entity\Store;

/**
 * Tests the add to cart form.
 *
 * @group commerce
 */
class ProductVariationTitleGenerationTest extends CommerceTestBase {
  /**
   * The store to test against.
   *
   * @var \Drupal\commerce_store\Entity\Store
   */
  protected $store;

  /**
   * The variation type to test against.
   *
   * @var \Drupal\commerce_product\Entity\ProductVariationTypeInterface $variationType
   */
  protected $variationType;

  /**
   * Modules to enable.
   *
   * @var array
   */
  public static $modules = [
    'commerce_order',
    'commerce_product',
    'field_ui',
  ];

  /**
   * {@inheritdoc}
   */
  protected function getAdministratorPermissions() {
    return array_merge([
      'administer products',
      'administer product types',
      'administer commerce_product_variation form display',
    ], parent::getAdministratorPermissions());
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    parent::setUp();
    // Create a store.
    $values = [
      'name' => t('Default store'),
      'uid' => 1,
      'mail' => \Drupal::config('system.site')->get('mail'),
      'type' => 'default',
      'default_currency' => 'USD',
      'address' => [
        'country_code' => 'GB',
        'locality' => 'London',
        'postal_code' => 'NW1 6XE',
        'address_line1' => '221B Baker Street',
      ],
    ];
    $this->store = Store::create($values);
    $this->store->save();

    // Set as default store.
    \Drupal::configFactory()->getEditable('commerce_store.settings')
           ->set('default_store', $this->store->uuid())->save();

    $this->variationType = ProductVariationType::create([
      'id' => 'test_default',
      'label' => 'Test Default',
      'lineItemType' => 'product_variation',
    ]);
    $this->variationType->save();
  }

  /**
   * Test the setting.
   */
  public function testTitleAutogenerationOption() {
    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $field_definitions */
    $this->assertFalse($this->variationType->isTitleAutogenerated());
    $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('commerce_product_variation', $this->variationType->id());
    $this->assertEqual($field_definitions['title']->getDisplayOptions('form')['type'], 'string_textfield');

    // Enable generation.
    $this->variationType->setTitleAutogenerated(TRUE);
    $this->variationType->save();

    /** @var \Drupal\commerce_product\Entity\ProductVariationTypeInterface $variation_type */
    $variation_type = ProductVariationType::load($this->variationType->id());
    $this->assertTrue($variation_type->isTitleAutogenerated());

    /** @var \Drupal\Core\Field\BaseFieldDefinition[] $field_definitions */
    $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('commerce_product_variation', $this->variationType->id());
    $this->assertNull($field_definitions['title']->getDisplayOptions('form'));
  }

}
