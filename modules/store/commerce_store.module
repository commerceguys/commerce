<?php

/**
 * @file
 * Defines the Store entity and associated features.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function commerce_store_theme() {
  return [
    'commerce_store' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_store_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  $widget_name = $context['widget']->getPluginId();
  if ($field_name == 'billing_countries' && $entity_type == 'commerce_store' && $widget_name == 'options_select') {
    $element['#options']['_none'] = t('- All countries -');
    $element['#size'] = 5;
  }
}

/**
 * Implements hook_theme_suggestions_commerce_store().
 */
function commerce_store_theme_suggestions_commerce_store(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_store', $variables);
}

/**
 * Prepares variables for store templates.
 *
 * Default template: commerce-store.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_store(array &$variables) {
  /** @var Drupal\commerce_store\Entity\StoreInterface $store */
  $store = $variables['elements']['#commerce_store'];

  $variables['store'] = $store;
  $variables['url'] = $store->toUrl();
  // Helpful $content variable for templates.
  $variables['content'] = [];
  foreach (\Drupal\Core\Render\Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Helper function to generate add store links.
 *
 * @param array $options
 *   Array of options to pass to the route generation.
 *
 * @return \Drupal\Core\Link
 *   The link object to be sent to.
 */
function _commerce_store_get_add_link($options = []) {

  // Query our store types.
  $store_type_query = \Drupal::getContainer()->get('entity_type.manager')->getStorage('commerce_store_type')->getQuery()->execute();

  // Initialize our route parameters.
  $route_parameters = [];

  // If there is one type only, we pass it and redirect to the add_form.
  if (count($store_type_query) == 1) {
    $route_parameters = ['type' => reset($store_type_query)];
    $route_name = 'entity.commerce_store.add_form';
  }
  else {
    $route_name = 'entity.commerce_store.add_page';
  }

  return \Drupal\Core\Link::createFromRoute('Add a new store.', $route_name, $route_parameters, $options);
}