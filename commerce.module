<?php

/**
 * @file
 * Defines the Store entity type and common functions used by Commerce modules.
 */

use Drupal\commerce\Entity\CommerceStore;
use Drupal\commerce\Entity\CommerceStoreType;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_permission().
 */
function commerce_permission() {
  $permissions = array(
    'administer commerce_store_type entities' => array(
      'title' => t('Administer store types'),
      'description' => t('Allows users to create, update, and delete store types.'),
      'restrict access' => TRUE,
    ),
    'administer commerce_store entities' => array(
      'title' => t('Administer stores'),
      'description' => t('Allows users to create, update, and delete stores.'),
      'restrict access' => TRUE,
    ),
    'configure store' => array(
      'title' => t('Configure store settings'),
      'description' => t('Allows users to update store currency and contact settings.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_theme().
 */
function commerce_theme() {
  return array(
    'commerce_store_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'commerce.pages.inc',
      'template' => 'commerce-store-add-list',
    ),
  );
}

/**
 * Menu argument loader: loads a store by its ID.
 *
 * @param integer $id
 *   The ID of the store to load.
 *
 * @return \Drupal\commerce\CommerceStoreInterface
 *   A store object or NULL if $id does not exist.
 */
function commerce_store_load($id) {
  return CommerceStore::load($id);
}

/**
 * Menu argument loader: loads a store type by its machine name.
 *
 * @param string $type
 *   The machine name of the store type to load.
 *
 * @return \Drupal\commerce\CommerceStoreTypeInterface
 *   A store type object or NULL if $name does not exist.
 */
function commerce_store_type_load($type) {
  return CommerceStoreType::load($type);
}

/**
 * Implements hook_toolbar().
 */
function commerce_toolbar() {
  $items = array();

  $items['commerce'] = array(
    '#type' => 'toolbar_item',
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'commerce') . '/css/commerce.icons.css',
      ),
    ),
  );

  return $items;
}

/**
 * Returns the e-mail address from which to send commerce related e-mails.
 *
 * Currently this is just using the site's e-mail address, but this may be
 * updated to use a specific e-mail address when we add a settings form for the
 * store's physical address and contact information.
 */
function commerce_email_from() {
  return \Drupal::config('system.site')->get('mail');
}

/**
 * Implements hook_entity_operation().
 *
 * Add devel link if this entity type is /commerce_store[_type]/.
 */
function commerce_entity_operation(EntityInterface $entity) {
  $operations = array();
  if (!\Drupal::moduleHandler()->moduleExists('devel')) {
    return $operations;
  }

  $entity_routes =
    array(
      'commerce_store' => 'commerce.store_devel',
      'commerce_store_type' => 'commerce.store_type_devel',
    );

  $entity_type_id = $entity->getEntityTypeId();
  if (\Drupal::currentUser()->hasPermission('access devel information') && in_array($entity_type_id, array_keys($entity_routes))) {
    $operations['devel'] = array(
      'route_name' => $entity_routes[$entity_type_id],
      'route_parameters' => array($entity_type_id => $entity->id()),
      'title' => t('Devel'),
      'weight' => 15,
    );
  }

  return $operations;
}

/**
 * Returns the currency code of the site's default currency.
 */
function commerce_default_currency() {
  return \Drupal::config('commerce')->get('default_currency');
}
