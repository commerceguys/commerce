<?php

/**
 * @file
 * Defines common functionality for all Commerce modules.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_toolbar().
 */
function commerce_toolbar() {
  $items = [];
  $items['commerce'] = [
    '#type' => 'toolbar_item',
    '#attached' => [
      'library' => [
        'commerce/drupal.commerce.toolbar',
      ],
    ],
  ];

  return $items;
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Base fields have a description that's used for two very different purposes:
 * - To describe the field in the Views UI and other parts of the system.
 * - As user-facing help text shown on field widgets.
 * The text is rarely suitable for both, and in most cases feels redundant
 * as user-facing help text. Hence we remove it from that context, but only if
 * the definition didn't specify otherwise via our display_description setting.
 */
function commerce_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  $field_definition = $context['items']->getFieldDefinition();
  if (!($field_definition instanceof \Drupal\Core\Field\BaseFieldDefinition)) {
    // Not a base field.
    return;
  }
  if (strpos($field_definition->getTargetEntityTypeId(), 'commerce_') !== 0) {
    // Not a Commerce entity type.
    return;
  }
  if ($field_definition->getSetting('display_description')) {
    // The definition requested that the description stays untouched.
    return;
  }

  $element['#description'] = '';
  // Many widgets are nested one level deeper.
  $children = \Drupal\Core\Render\Element::getVisibleChildren($element);
  if (count($children) == 1) {
    $child = reset($children);
    $element[$child]['#description'] = '';
  }
}

/**
 * Helper for providing entity theme suggestions.
 *
 * @param string $entity_type_id
 *   The entity type id.
 * @param array $variables
 *   An array of variables passed to the theme hook.
 *
 * @return array
 *   An array of theme suggestions.
 */
function _commerce_entity_theme_suggestions($entity_type_id, array $variables) {
  $original = $variables['theme_hook_original'];
  $entity = $variables['elements']['#' . $entity_type_id];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions = [];
  $suggestions[] = $original;
  $suggestions[] = $original . '__' . $sanitized_view_mode;
  $suggestions[] = $original . '__' . $entity->bundle();
  $suggestions[] = $original . '__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = $original . '__' . $entity->id();
  $suggestions[] = $original . '__' . $entity->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}
